type Query {
  info: String!
  feed: [Link]!
  link(id: ID!): Link
}

type Mutation {
  post(url: String!, description: String!): Link!
  updateLink(id: ID!, url: String, description: String): Link
  deleteLink(id: ID!): Link
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

type Link {
  id: ID! @unique
  createdAt: String!
  updatedAt: String!
  description: String!
  url: String!
  postedBy: User
}

type User {
  id: ID! @unique
  email: String! @unique
  name: String!
  password: String!
  links: [Link!]!
}

type AuthPayload {
  token: String
  user: User
  errMsg: String
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Subscription {
  newLink: LinkSubscriptionPayload
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

type LinkPreviousValues {
  id: ID!
  description: String!
  url: String!
}